-- Casting using Cast() OR expression::type
/*
CAST (expression AS target_data_type);

	expression 		Can be constant , a table column or an expression
	target_data_type 	Boolean, Charachter(char, varchar, text), Numeric(integer, floating poinyt number),array, JSON, UUID
						hstore(stores an keyvalue pairs), Temporal type (time,data, timestamp,timestampz,interval),
						special type (network address, geometric data)
*/
--string to int
SELECT CAST ('10' AS INTEGER);
SELECT '10'::INTEGER;
--string to date
SELECT CAST ('13-02-2025' AS DATE),CAST('13-FEB-2025' AS DATE);
SELECT '13-02-205'::DATE;
-- string to boolean
SELECT CAST('TRUE' AS BOOLEAN);
SELECT CAST('T' AS BOOLEAN);
SELECT CAST ('0' AS BOOLEAN);
--STING TO DOUBLE
SELECT CAST ('14.7489' ASS DOUBLE PRECISION)
--string to timestamp
SELECT '2020-02-20 10:30:25.467'::TIMESTAMP;
--String to interval
SELECT 
	'10 minute'::INTERVAL,
	'4 hour'::INTERVAL,
	'1 day'::INTERVAL;


--IMPLICIT TO EXPLICIT CONVERSION

SELECT ROUND(10,4) AS "result";
SELECT ROUND (CAST (10 AS NUMERIC),4) AS "result";

--cast with text
SELECT SUBSTR('123456',2) AS "result";

SELECT SUBSTR(CAST('123456' AS TEXT),2) AS "explicit";

-- Table data conversion

CREATE TABLE ratings(
	rating_id SERIAL PRIMARY KEY,
	rating VARCHAR(1) NOT NULL
);
SELECT * FROM ratings;

INSERT INTO ratings(rating)VALUES
('A'),('B'),('A'),('C'),('D');

--Now we need all ratings into 1 2 3...5 or anything else there make it as 0
SELECT 
	rating_id,
	CASE 
		WHEN rating~E'^\\d+$' THEN
			CAST (rating AS INTEGER)
		ELSE
			0
		END as rating
FROM
	ratings;
	
	
-- to_char
/*
	TO_CHAR(expression,format)
	TO_CHAR() converts - a timestamp, an interval, an integer, a double presision or numberic value to a string
	valid format
		9 Numeric value with the specified number of digits
		0 Numeric value with leading zeros
		. (period) Decimal point
		D decimal point that uses locale
		. (comma) group (thousand) separator
		FM Fill Mode, which suppresses padding blanks and leading zeros.
		PR Negative value in angle brackets.
		S Sign anchored to a number that uses local
		L currency symbol that uses locale
		MI minus sign in the specified position for numbers that are less than 0.
		PL Plus sign in the specified position for numbers that are greater than 0.
		SG Plus/minus sign in the specified position
		RN Roman numeral that ranges from 1 to 3999
		Th or th Uppercase or lower case ordinal number suffix.
		
		Pattern Description
		--------------
		Y,YYY YEar in 4 digits with comma
		YYYY Year in 4 digits
		YYY Last 3 digit of the year
		YY Last 2 digits of the year
		Y LAst digit of the year
		IYYY ISO 8601 week-numbering year (4 or more digits)
		IYY LAst 3 digits of the ISO 8601 week-numbering year
		IY LAst 2 digits of the ISO 8601 week-numbering year
		I LAst digits of the ISO 8601 week-numbering year
		BC, bc,AD or ad    Era indicator without periods
		B.C, b.c, A.D or a.d ora.d Era indicator with periods
		MONTH English month name in Uppercase
		month  Full capitalized English month name
 	
*/
SELECT TO_CHAR(100870,'9,99999');

SELECT 
	release_date,
	TO_CHAR(release_date,'DD-MM-YYYY'),
	TO_CHAR(release_date,'DD, MM, YYYY')
FROM movies;


SELECT 
	TO_CHAR(
		TIMESTAMP '2020-01-02 10:30:45',
		'HH24:MI:SS'
	);
-- D- Decimal point	
SELECT 
	movie_id,
	revenues_domerstic,
	TO_CHAR(revenues_domestic,'$99999D99')
FROM movies_revenues;



-- TO_NUMBER()
--		TO_NUMBER(string, format)

SELECT TO_NUMBER('1420.89','9999.');

SELECT TO_NUMBER('10,625.78-','99G999D99S');

SELECT TO_NUMBER('$1,420.64','L9G999');

SELECT TO_NUMBER('1,234,567.89','9G999G999');

SELECT TO_NUMBER('1,234,567.89','9G999G999D99');

SELECT TO_NUMBER('$1,978,299.78','L9G999G999.99')


-- TO_DATE()
--		TO_DATE(text, format)

SELECT TO_DATE('2020/10/22','YYYY/MM/DD');

SELECT TO_DATE('02211999','MMDDYYYY');

SELECT TO_DATE('March 07, 2019','Month DD, YYYY');

-- ERROR HANDLING

--SELECT TO_DATE('2020/02/30','YYYY/MM/DD');

--TO_TIMESTAMP()
--		TO_TIMESTAMP(timestamp,format)

SELECT TO_TIMESTAMP(
	'2020-10-28 10:30:25',
	'YYYY-MM-DD HH:MI:SS'
);
--It skip spaces
SELECT TO_TIMESTAMP('2020		May','YYYY MON');

SELECT TO_TIMESTAMP('2020-01-01 32:8:00', 'YYYY-MM-DD HH24:MI:SS');

SELECT TO_TIMESTAMP('2020-01-01 23:8:00', 'YYYY-MM-DD HH24:MI:SS');



